# -*- coding: utf-8 -*-

"""
    credofasterpartnerapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from credofasterpartnerapi.api_helper import APIHelper
from credofasterpartnerapi.configuration import Configuration
from credofasterpartnerapi.controllers.base_controller import BaseController
from credofasterpartnerapi.http.auth.custom_header_auth import CustomHeaderAuth
from credofasterpartnerapi.models.register_callback_response import RegisterCallbackResponse
from credofasterpartnerapi.models.event_callback_feedback import EventCallbackFeedback

class EventsController(BaseController):

    """A Controller to access Endpoints in the credofasterpartnerapi API."""


    def register_callback(self,
                          request):
        """Does a POST request to /RegisterCallback.

        A callback to receive the below Callbacks

        Args:
            request (RegisterCallbackRequest): TODO: type description here.
                Example: 

        Returns:
            RegisterCallbackResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/RegisterCallback'
        _query_builder = Configuration.get_base_uri(Configuration.Server.DEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))
        CustomHeaderAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, RegisterCallbackResponse.from_dictionary)

    def client_event_feedback(self,
                              payload_to_receive):
        """Does a POST request to /my_endpoint_here.

        You are required to provide a HTTP/HTTPS endpoint, to which we will
        publish various events. 
        This Endpoint will be hosted on the CLIENT's Environment. If no
        endpoint is provided, we are not liable to any missing events. 
        NOTE: A DETAILED PDF of all Events is shared on request. It contains
        application events, System Health Events and Alerts on the same.

        Args:
            payload_to_receive (EventCallbackPayload): Sample Payload:
                {"EventId":"123456789","EventType":"QUEUED","RequestId":"A09797
                a11e2564061b859781b18bb34dd","EventData":{}}

        Returns:
            EventCallbackFeedback: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/my_endpoint_here'
        _query_builder = Configuration.get_base_uri(Configuration.Server.MY_CALLBACK_ENDPOINT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(payload_to_receive))
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, EventCallbackFeedback.from_dictionary)
