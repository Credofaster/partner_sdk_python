# -*- coding: utf-8 -*-

"""
    credofasterpartnerapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from credofasterpartnerapi.api_helper import APIHelper
from credofasterpartnerapi.configuration import Configuration
from credofasterpartnerapi.controllers.base_controller import BaseController
from credofasterpartnerapi.http.auth.custom_header_auth import CustomHeaderAuth
from credofasterpartnerapi.models.partner_airtime_response import PartnerAirtimeResponse
from credofasterpartnerapi.models.partner_airtime_balance_response import PartnerAirtimeBalanceResponse

class MainController(BaseController):

    """A Controller to access Endpoints in the credofasterpartnerapi API."""


    def airtime_request(self,
                        request):
        """Does a POST request to /airtime/request.

        Request Airtime Purchase

        Args:
            request (PartnerAirtimeRequest): TODO: type description here.
                Example: 

        Returns:
            list of PartnerAirtimeResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/airtime/request'
        _query_builder = Configuration.get_base_uri(Configuration.Server.DEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(request))
        CustomHeaderAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, PartnerAirtimeResponse.from_dictionary)

    def airtime_balance(self):
        """Does a POST request to /airtime/balance.

        Gets the current Working Balance. 
        Balance is SIGNED

        Returns:
            PartnerAirtimeBalanceResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/airtime/balance'
        _query_builder = Configuration.get_base_uri(Configuration.Server.DEFAULT)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers)
        CustomHeaderAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, PartnerAirtimeBalanceResponse.from_dictionary)
