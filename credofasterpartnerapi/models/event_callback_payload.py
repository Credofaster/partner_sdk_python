# -*- coding: utf-8 -*-

"""
    credofasterpartnerapi

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""


class EventCallbackPayload(object):

    """Implementation of the 'EventCallbackPayload' model.

    Payload the Partner receives on for each Event

    Attributes:
        event_id (string): This is shared by the system and should be referred
            when doing any debugging
        event_type (string): Contains the EVENT type.  detailed list of this
            can be shared on Request to the admin
        request_id (string): For Events that are related with the Clients
            Request, you will get a Request ID that was generate by the system
            when you made a  service call
        event_data (object): Contains any addition fields,(CAN BE NESTED). See
            the PDF for more details

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "event_id":'EventId',
        "event_type":'EventType',
        "event_data":'EventData',
        "request_id":'RequestId'
    }

    def __init__(self,
                 event_id='123456789',
                 event_type='QUEUED',
                 event_data=None,
                 request_id=None):
        """Constructor for the EventCallbackPayload class"""

        # Initialize members of the class
        self.event_id = event_id
        self.event_type = event_type
        self.request_id = request_id
        self.event_data = event_data


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        event_id = dictionary.get("EventId") if dictionary.get("EventId") else '123456789'
        event_type = dictionary.get("EventType") if dictionary.get("EventType") else 'QUEUED'
        event_data = dictionary.get('EventData')
        request_id = dictionary.get('RequestId')

        # Return an object of this model
        return cls(event_id,
                   event_type,
                   event_data,
                   request_id)


